from abc import ABC, abstractmethod
from pathlib import Path
import shutil
from subprocess import PIPE, CompletedProcess, run
from typing import List


class TestRunner(ABC):
    """Base class for system test runners.

    This class provides a common interface for running system tests on LOBSTER tools.
    The following features are provided:
    - The test runner can be configured with input files that are copied into the
      working directory before running the tool.
    - The test runner can be configured with output files that are expected to be
      generated by the tool. These files can be checked after the tool has been run.
    - The test runner can be configured with command line arguments that are passed
      to the tool when it is run.
    - The test runner can be configured with a working directory that is used as the
      current working directory when the tool is run.
    - The test runner can run the tool under test and return the result as a
      subprocess.CompletedProcess object.
    """

    def __init__(self, tool_name: str, working_dir: Path):
        """Constructor

        :param tool_name: Name of the LOBSTER tool. This must be equal to the name of
        the Python file that contains the "__main__" entry point.
        :param working_dir: path to a directory which to use as current working
        directory for the tool under test. Input files will be copied into this
        directory before running the tool.
        """
        self._test_suite_directory = Path(__file__).resolve().parents[0] / tool_name
        self._tool_main_path = Path(__file__).resolve().parents[1] / tool_name
        self._tool_name = tool_name
        self._tool_output_files: List[Path] = []
        self._working_dir = working_dir

    @property
    def tool_output_files(self) -> List[Path]:
        """Returns a list of output files that are expected to be generated by the tool.

        The TestRunner expects that the output files are generated in the working
        directory. However, the return value of this method is a list of Path objects
        pointing to the files which serve as comparison reference. It is then possible
        to check if one file has been generated for each file in the list.
        """
        return self._tool_output_files

    @property
    def working_dir(self) -> Path:
        """Returns the directory that is used as the current working directory
        when the tool under test is run.
        """
        return self._working_dir

    @abstractmethod
    def get_tool_args(self) -> List[str]:
        """Returns the command line arguments that shall be used to start the tool under
           test."""
        pass

    def declare_input_file(self, file: Path):
        """Declares a file from the 'data' folder to be used as an input file.

        This file will be copied into the execution directory immediately.
        """
        shutil.copy(
            src=file,
            dst=self._working_dir,
        )

    def declare_output_file(self, file: Path):
        self._tool_output_files.append(file)

    @staticmethod
    def get_repo_root() -> Path:
        """Returns the root directory of the LOBSTER repository."""
        return Path(__file__).resolve().parents[1]

    def run_tool_test(self) -> CompletedProcess:
        """Runs the tool under test and measures the branch coverage."""
        tool_args = self.get_tool_args()

        root_directory = self.get_repo_root()
        coverage_command = [
            "coverage",
            "run",
            "-p",
            f"--rcfile={root_directory / 'coverage.cfg'}",
            f"--data-file={root_directory / '.coverage.system'}",
            f"--source={root_directory / 'lobster'}",
            "--branch",
            self._tool_main_path,
            *tool_args
        ]
        completed_process = run(
            coverage_command,
            stdout=PIPE,
            stderr=PIPE,
            encoding="UTF-8",
            cwd=str(self._working_dir),
            check=False,
        )
        return completed_process
