#!/usr/bin/env python3
#
# lobster_matlab - Extract Octave or MATLAB tracing tags for LOBSTER
# Copyright (C) 2022 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program. If not, see
# <https://www.gnu.org/licenses/>.

import sys
import argparse
import subprocess
import json

from lobster.items import Tracing_Tag, Implementation, Activity
from lobster.location import File_Reference
from lobster.io import lobster_write


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("files",
                    nargs="+",
                    metavar="FILE|DIR")
    ap.add_argument("--code-out",
                    default=None)
    ap.add_argument("--test-out",
                    default=None)

    options = ap.parse_args()

    rv = subprocess.run([sys.executable,
                         "-m", "miss_hit.mh_trace"] +
                        options.files,
                        encoding="UTF-8",
                        check=False)

    if rv.returncode != 0:
        return 1

    with open("mh_trace.json", "r", encoding="UTF-8") as fd:
        data = json.load(fd)

    db_code = []
    db_test = []
    for function_name, function in data.items():
        tag = Tracing_Tag("matlab", function_name)
        loc = File_Reference(function["source"]["filename"],
                             function["source"]["line"])

        if function["test"]:
            item = Activity(tag, loc,
                            "MATLAB", "test", "unknown")
            db_test.append(item)
        else:
            item = Implementation(tag, loc,
                                  "MATLAB", "function", function_name)
            db_code.append(item)

        for ref in function["tags"]:
            item.add_tracing_target(Tracing_Tag("req", ref))

    if options.code_out:
        with open(options.code_out, "w", encoding="UTF-8") as fd:
            lobster_write(fd, Implementation, "lobster_matlab", db_code)
        print("Written output for %u items to %s" % (len(db_code),
                                                     options.code_out))

    if options.test_out:
        with open(options.test_out, "w", encoding="UTF-8") as fd:
            lobster_write(fd, Activity, "lobster_matlab", db_test)
        print("Written output for %u items to %s" % (len(db_test),
                                                     options.test_out))


if __name__ == "__main__":
    sys.exit(main())
