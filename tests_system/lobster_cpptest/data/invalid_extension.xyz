/** ensure all desired test macros are parsed */

TEST_P_INSTANCE(TestMacrosTestModified, TestPInstanceModified) {}
TEST(TestMacrosTestModified, TestTestModified) {}
TEST_F(TestMacrosTestModified1, TestTestModifiedF) {}
TEST_P(TestMacrosTestModified1, TestTestModifiedP) {}
TYPED_TEST(TestMacrosTestModified2, TestTypedTestModified) {}
TYPED_TEST_P(TestMacrosTestModified2, TestTypedTestModifiedP) {}
TYPED_TEST_SUITE(TestMacrosTestModified2, TestTypedTestModifiedSuite) {}
TEST_F_INSTANCE(TestMacrosTestModified3, TestFInstanceModified) {}

/** ensure test implementation is correctly parsed */

TEST(
    ImplementationTestModified,
    TestMultiLineModified
) {}

TEST(ImplementationTestModified, EmptyImplementation) {}

TEST(ImplementationTestModified, ImplementationMultipleLines) {
    EXPECT_EQ(true, DummyFunctionForValidCondition());
}

TEST(ImplementationTestModified, MultipleLinesWithCommentsModified)
{
    // Some comments
    EXPECT_EQ(true, DummyFunctionForValidCondition());
    // Some other comments
}

/** ensure test tag is correctly parsed */

/// @test foo1
TEST(TestTagTestModified, TestTagInOnlineModified) {}

///
/// @test foo2
TEST(TestTagTestModified, TestTagPrecededByCommentModified) {}

/// @test foo3
///
TEST(TestTagTestModified, TestTagFollowedByCommentModified) {}

///
/// @test foo4
///
TEST(TestTagTestModified, TestTagWithCommentsAroundModified) {}

/// @test lorem ipsum
TEST(TestTagTestModified, TestTagAsTextModified) {}

/** ensure brief are parsed correctly */

/// @brief Some nasty bug1
TEST(BriefTagTestModified, BriefTagInOnlineModified) {}

/// @brief This is a brief field
/// with a long description
TEST(BriefTagTestModified, BriefTagMultipleLinesModified) {}

/** ensure requirement tags are parse correctly */

/// @requirement CB-#0815
TEST(RequirementTagTestModified, RequirementModified) {}

/** @requirement CB-#0815 CB-#0816 */
TEST(RequirementTagTestModified1, RequirementAsOneLineCommentsModified) {}

/**
 * @requirement CB-#0815 CB-#0816
 */
TEST(RequirementTagTestModified1, RequirementAsCommentsModified) {}

/**
 * @requirement CB-#0815, CB-#0816,
 * 				CB-#0817
 * @requirement CB-#0818 CB-#0819
 * 				CB-#0820
 */
TEST(RequirementTagTestModified1, RequirementsAsMultipleCommentsModified) {}

///
/// @requirement https://codebeamer.company.net/cb/issue/0815
///
TEST(RequirementTagTestModified2, URLRequirementModified) {}

///
/// @requirement https://codebeamer.company.net/cb/issue/0815,
///              https://codebeamer.company.net/cb/issue/0816
///
TEST(RequirementTagTestModified2, URLRequirementsCommaSeparatedModified) {}

/**
 *  @requirement https://codebeamer.company.net/cb/issue/0815
 *               https://codebeamer.company.net/cb/issue/0816
 */
TEST(RequirementTagTestModified2, URLRequirementsAsCommentsSpaceSeparatedModified) {}

/**
 *  @requirement https://codebeamer.company.net/cb/issue/0815, https://codebeamer.company.net/cb/issue/0816
 *  @requirement https://codebeamer.company.net/cb/issue/0817
 *               https://codebeamer.company.net/cb/issue/0818
 */
TEST(RequirementTagTestModified2, MultipleURLRequirementsModified) {}

///
/// @requirement https://codebeamer.company.net/cb/issue/0815
/// @requirement CB-#0816
///
TEST(RequirementTagTestModified3, MixedRequirementsModified) {}

///
/// @requirement something_arbitrary
///
TEST(RequirementTagTestModified4, InvalidRequirementModified) {}

///
/// @requirement 
///
TEST(RequirementTagTestModified4, MissingRequirementReferenceModified) {}

/** ensure required-by tags are parsed correctly */

///
/// @requiredby FOO0::BAR0
///
TEST(RequirementByTest1Modified, RequiredByWithAtModified) {}

///
/// @requiredby FOO0::BAR0, FOO1::BAR1
///
TEST(RequirementByTest1Modified, MultipleRequiredByCommaSeparatedModified) {}

/**
 * @requiredby FOO0::BAR0, FOO1::BAR1,
 * 			   FOO2::BAR2
 * @requiredby FOO3::BAR3 FOO4::BAR4,
 * 			   FOO5::BAR5
 * @requiredby FOO6::BAR6 FOO7::BAR7
 * 			   FOO8::BAR8
 */
TEST(RequirementByTest1Modified, MultipleRequiredByAsCommentsModified) {}

/// @test lorem ipsum
/// @requiredby FOO0::BAR0,
///             FOO1::BAR1,
/// 			FOO2::BAR2,
///             FOO3::BAR3,
///             FOO4::BAR4,
/// 			FOO5::BAR5,
///             FOO6::BAR6,
///             FOO7::BAR7,
/// 			FOO8::BAR8
///
TEST(RequirementByTest2Modified, RequiredByWithNewLinesModified) {}

/** ensure testmethods are parsed correctly */

/// @testmethods TM_REQUIREMENT
TEST(TestMethodsTagTestModified, TestMethodModified) {}

/**
 * @testmethods TM_PAIRWISE TM_BOUNDARY
 */
TEST(TestMethodsTagTestModified2, TestMethodAsCommentsSpaceSeparatedModified) {}

/// @testmethods TM_REQUIREMENT, TM_EQUIVALENCE
TEST(TestMethodsTagTestModified2,  TestMethodAsCommentsCommaSeparatedModified) {}

// /// @testmethods TM_REQUIREMENT, TM_EQUIVALENCE
// /// @testmethods TM_BOUNDARY, TM_CONDITION
// TEST(TestMethodsTagTestModified2,  TestMethodAsCommentsMultipleLinesModified) {}

///
/// @testmethods something_arbitrary
///
TEST(TestMethodsTagTestModified3, InvalidTestMethodModified) {}

///
/// @testmethods 
///
TEST(TestMethodsTagTestModified4, MissingTestMethodModified) {}

/** ensure everything is parsed correctly at once */

///
/// @test foo
/// @brief this test tests something
/// @requirement CB-#0815, CB-#0816
/// @requiredby FOO0::BAR0
/// @testmethods TM_BOUNDARY, TM_REQUIREMENT
///
TEST(AllTogetherTestModified, ImplementationMultipleLinesModified) {
	EXPECT_EQ(true, DummyFunctionForValidCondition());
}

/**
 * commented test cases
 */
// TEST(LayoutTestModified1, SingleCommentModified){}
/* TEST(LayoutTestModified2, InlineCommentModified){} */
/*
 * TEST(LayoutTestModified2, CommentModified) {}
 */

/**
 * invalid test cases
 * 	the following tests should not be parsed
 * 	as valid test cases
 */
TEST(InvalidTest1Modified,) {}
TEST(, InvalidTest2Modified) {}
TEST(,) {}
TEST() {}
